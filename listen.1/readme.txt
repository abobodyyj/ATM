一、文件目录划分：
bin  --入口代码
conf --配置文件
data --存储相关的东西（之前：数据库，文件，之后特别大可以分开）
logs --所有通用的程序代码（目的：lib里放一些公共的代码，例如md5加密）
core --所有的业务逻辑代码

二、配置文件：（config.py）
1、定义用户登录和注册的字符串（用于反射时遍币用户输入的登录和注册）
2、定义ATM交易列表（用于反射时遍币用户输入的交易行为）
3、定义用户的登录状态（用于判断用户的登录状态）
4、定义全局日志类型（登录日志，事物日志）
5、定义日志文件的输入路径
6、定义用户信息的存储引擎和存储的绝对路径（默认记录文件的绝对路径，扩展时直接添加新信息，然后在接口文件做if判断即可）
7、定义用户交易的事物类型。（用于规划还款，取款，转账的计费方式，包括加减钱，利息，手续费。也可以添加一些vip、白金、钻石会员的计费信息）


三、通用接口文件：（tool.py）
1、定义反射函数。（与用户交互时，判断用户输入行为）
2、定义接口引擎。（用于保存，读取账户信息到文件中）
3、定义判断用户存储引擎的种类。（默认从配置文件中读取，如果需要添加存储引擎方式，可以直接加if判断，方便扩容）
4、定义md5认证加密。（用户密码做加密）
5、定义过期时间，账户注册时按照开户时间往后推迟2年。（自定义年份）
6、定义输入用户名和密码函数。（用于账户交互）
7、定义注册配置模板（有账户信息扩展时，可直接以字典的形式进行扩展）
8、定义判断用户输入是否为整数（用户在做还款、取款、转账等交易时，保证用户输入的是整数方便int转换）
9、定义用户的账户信息。（用户在做还款、取款、转账等交易时，显示当前用户金额与交易金额信息）
10、定义ATM用户交易事物（用户在做还款、取款、转账等交易时，可以调用此函数来做金额计算，相当于一个简单的小算法）




四、逻辑过程：
1、运行bin目录下的startup.py文件启动程序
2、调用main.py文件进入ATM的主流程函数，并通过反射的方式判断用户操作行为：
3、验证登录：（调用login.py文件）
        acc_login函数：
		    输入用户名密码，调用acc_auth函数，进行验证。
			如果验证登录成功，则将用户id、登录状态、账户信息保存到内存中。
			并将账户信息返回给main.py（主流程函数），并打印交易列表。
			
			acc_auth函数：
				调用tool.account_load函数，判断账户信息存储引擎的种类（默认为文件，可扩展）。
				如果账户信息文件存在，则判断用户输入的ID=账户信息记录的ID。
				如果账户ID存在，则判断用户输入的md5密码=账户信息记录的密码（md5加密后的）。
					如果账户ID和密码都存在，则提取账户文件中的过期时间。
					判断如果当前时间小于账户过期时间（有效账户）。
					则为有效用户并返回账户信息到acc_login函数。
					否则为过期用户。
				
				tool.account_load函数:
						调用db_handle函数，判断账户信息文件的存储引擎种类（单独定义个函数的目的是为了方便存储引擎种类的扩展，例如：file，db，redis等）。
						定义统一的一个语法，通过高阶函数，来查询指定的账户ID文件。
						如果账户ID文件存在，则将账户信息返还给acc_auth函数。
						
					tool.db_handle函数:
						调用config.USER_DATA定义的存储引擎的信息，将高阶函数赋值成变量，用于统一语法传值。（目的：用于分割业务逻辑和底层逻辑，无需关心底层的变动，只需要统一的语法进行传值。）
						判断config.USER_DATA定义的存储引擎的种类。
						根据种类的不同调用该类型的高阶函数（db_file_exec(存储引擎的信息)，db_mysql_exec(存储引擎的信息),db_redis_exec(存储引擎的信息)）。
						返回存储引擎高阶函数的结果值，到tool.account_load函数。
						
						engine.db_file_exec函数：（承上启下，接口层）
							注意：该函数是按照存储引擎的种类区分的，不同的存储引擎需要调用不同的高阶函数体，在return相对应的高阶函数体（不加括号），返回给db_handle函数，例如：
							tool.db_handle函数传参file引擎，return高阶函数体file_exec 
							tool.db_handle函数传参mysql引擎，return高阶函数体mysql_exec
							tool.db_handle函数传参redis引擎，return高阶函数体redis_exec
						
					file_exec高阶函数：
						接收tool.account_load函数的统一语法，将语法进行分割、切片取出需要的账户ID信息。
						在根据语法的特点来判断是读取，保存。（读取：select、保存：update）。
						提取账户ID后，判断目录或者文件的绝对路径，将文件以json的方式读取或者保存。	    
						select：返回文件里的账户信息，到tool.account_load函数里。
						update：返回True，到tool.account_load函数里。
	        
			
	
	
4、事物交易：（用户登录成功，并且状态为True）
    打印用户交易列表，并通过反射的方式遍币交易列表。
	    account_info函数：
		    加载用户信息（保证实时性）
			用于账户信息查询
			
		repay函数：
		    加载账户信息（保证实时性）
			打印交易前的账户信息
            用户输入交易金额
			判断是否为真
			调用算法进行计算
			交易成功后打印用户交易记录和账户信息
			
		withdraw函数：
		    同上
			
		transfer函数：
		    用于多个账户之间转账
			加载账户信息（保证实时性）
			用户输入账户ID
			加载输入的ID的账户信息
			如果账户ID存在，则提示用户输入金额
			调用算法公式进行计算
			交易成功后打印用户交易记录和账户信息
			
			

5、转账算法：
    计算还款、取款、转账的函数模块
	传参信息：事务日志、账户信息、交易类型、交易金额
	需要config中定义的交易类型标签，其中包括利息，手续费。
	转换成float格式的用户输入额度（还、取） 
	判断每次事务的交易类型，如果在标签中则进行加减金额
	最后保存到文件里
	并打印交易记录














